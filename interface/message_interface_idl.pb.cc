// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_interface_idl.proto

#include "message_interface_idl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_5finterface_5fidl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_message_5finterface_5fidl_2eproto;
namespace agent_interface {
class HeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Header> _instance;
} _Header_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class CommandWithArgumentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandWithArguments> _instance;
} _CommandWithArguments_default_instance_;
class TelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Telemetry> _instance;
} _Telemetry_default_instance_;
}  // namespace agent_interface
static void InitDefaultsscc_info_CommandWithArguments_message_5finterface_5fidl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_interface::_CommandWithArguments_default_instance_;
    new (ptr) ::agent_interface::CommandWithArguments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_interface::CommandWithArguments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandWithArguments_message_5finterface_5fidl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandWithArguments_message_5finterface_5fidl_2eproto}, {
      &scc_info_Header_message_5finterface_5fidl_2eproto.base,}};

static void InitDefaultsscc_info_Event_message_5finterface_5fidl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_interface::_Event_default_instance_;
    new (ptr) ::agent_interface::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_interface::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Event_message_5finterface_5fidl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Event_message_5finterface_5fidl_2eproto}, {
      &scc_info_Header_message_5finterface_5fidl_2eproto.base,}};

static void InitDefaultsscc_info_Header_message_5finterface_5fidl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_interface::_Header_default_instance_;
    new (ptr) ::agent_interface::Header();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_interface::Header::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_message_5finterface_5fidl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Header_message_5finterface_5fidl_2eproto}, {}};

static void InitDefaultsscc_info_Telemetry_message_5finterface_5fidl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agent_interface::_Telemetry_default_instance_;
    new (ptr) ::agent_interface::Telemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agent_interface::Telemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Telemetry_message_5finterface_5fidl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Telemetry_message_5finterface_5fidl_2eproto}, {
      &scc_info_Header_message_5finterface_5fidl_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_5finterface_5fidl_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_5finterface_5fidl_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_5finterface_5fidl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_5finterface_5fidl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, target_agent_id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, source_agent_id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, week_number_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, year_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, request_ack_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, source_device_type_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, target_device_type_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, message_id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, has_administrative_id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Header, message_type_),
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  6,
  9,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::agent_interface::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agent_interface::Event, header_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Event, id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Event, description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, header_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, number_arg_count_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, name_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::CommandWithArguments, value_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, header_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, id_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, name_),
  PROTOBUF_FIELD_OFFSET(::agent_interface::Telemetry, value_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::agent_interface::Header)},
  { 27, 35, sizeof(::agent_interface::Event)},
  { 38, 48, sizeof(::agent_interface::CommandWithArguments)},
  { 53, 62, sizeof(::agent_interface::Telemetry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agent_interface::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agent_interface::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agent_interface::_CommandWithArguments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agent_interface::_Telemetry_default_instance_),
};

const char descriptor_table_protodef_message_5finterface_5fidl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033message_interface_idl.proto\022\017agent_int"
  "erface\"\311\005\n\006Header\022\027\n\017target_agent_id\030\001 \002"
  "(\007\022\027\n\017source_agent_id\030\002 \002(\007\022\023\n\013week_numb"
  "er\030\003 \002(\007\022\014\n\004year\030\004 \002(\007\022\021\n\ttimestamp\030\005 \002("
  "\002\022\023\n\013request_ack\030\006 \002(\010\022>\n\022source_device_"
  "type\030\007 \002(\0162\".agent_interface.Header.Devi"
  "ceType\022>\n\022target_device_type\030\010 \002(\0162\".age"
  "nt_interface.Header.DeviceType\022\022\n\nmessag"
  "e_id\030\t \002(\007\022\035\n\025has_administrative_id\030\n \002("
  "\010\0229\n\014message_type\030\013 \002(\0162#.agent_interfac"
  "e.Header.MessageType\"s\n\nDeviceType\022\016\n\nUD"
  "P_SERVER\020\000\022\016\n\nTCP_SERVER\020\001\022\022\n\016SERVER_UDP"
  "_X86\020\002\022\022\n\016ROUTER_TP_LINK\020\003\022\n\n\006CAMERA\020\004\022\021"
  "\n\rPYTHON_CLIENT\020\005\"d\n\010DeviceId\022\033\n\027SERVER_"
  "UDP_X86_TALCA_ID\020\000\022\034\n\030WEB_API_PYTHON_CLI"
  "ENT_ID\020\001\022\035\n\031GENERIC_TP_LINK_ROUTER_ID\020\002\""
  "y\n\013MessageType\022\t\n\005EVENT\020\000\022\013\n\007COMMAND\020\001\022\010"
  "\n\004DATA\020\002\022\t\n\005VIDEO\020\003\022\017\n\013EVENT_PROTO\020\004\022\021\n\r"
  "COMMAND_PROTO\020\005\022\016\n\nDATA_PROTO\020\006\022\t\n\005COUNT"
  "\020\007\"Q\n\005Event\022\'\n\006header\030\001 \002(\0132\027.agent_inte"
  "rface.Header\022\n\n\002id\030\002 \002(\007\022\023\n\013description\030"
  "\003 \002(\t\"\362\001\n\024CommandWithArguments\022\'\n\006header"
  "\030\001 \002(\0132\027.agent_interface.Header\022\n\n\002id\030\002 "
  "\002(\007\022I\n\020number_arg_count\030\003 \002(\0162/.agent_in"
  "terface.CommandWithArguments.Arguments\022\014"
  "\n\004name\030\004 \003(\t\022\r\n\005value\030\005 \003(\t\"=\n\tArguments"
  "\022\007\n\003ONE\020\000\022\007\n\003TWO\020\001\022\t\n\005THREE\020\002\022\010\n\004FOUR\020\003\022"
  "\t\n\005TOTAL\020\004\"]\n\tTelemetry\022\'\n\006header\030\001 \002(\0132"
  "\027.agent_interface.Header\022\n\n\002id\030\002 \002(\007\022\014\n\004"
  "name\030\003 \003(\t\022\r\n\005value\030\004 \003(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_5finterface_5fidl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_5finterface_5fidl_2eproto_sccs[4] = {
  &scc_info_CommandWithArguments_message_5finterface_5fidl_2eproto.base,
  &scc_info_Event_message_5finterface_5fidl_2eproto.base,
  &scc_info_Header_message_5finterface_5fidl_2eproto.base,
  &scc_info_Telemetry_message_5finterface_5fidl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_5finterface_5fidl_2eproto_once;
static bool descriptor_table_message_5finterface_5fidl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5finterface_5fidl_2eproto = {
  &descriptor_table_message_5finterface_5fidl_2eproto_initialized, descriptor_table_protodef_message_5finterface_5fidl_2eproto, "message_interface_idl.proto", 1185,
  &descriptor_table_message_5finterface_5fidl_2eproto_once, descriptor_table_message_5finterface_5fidl_2eproto_sccs, descriptor_table_message_5finterface_5fidl_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_message_5finterface_5fidl_2eproto::offsets,
  file_level_metadata_message_5finterface_5fidl_2eproto, 4, file_level_enum_descriptors_message_5finterface_5fidl_2eproto, file_level_service_descriptors_message_5finterface_5fidl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_5finterface_5fidl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_5finterface_5fidl_2eproto), true);
namespace agent_interface {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5finterface_5fidl_2eproto);
  return file_level_enum_descriptors_message_5finterface_5fidl_2eproto[0];
}
bool Header_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Header_DeviceType Header::UDP_SERVER;
constexpr Header_DeviceType Header::TCP_SERVER;
constexpr Header_DeviceType Header::SERVER_UDP_X86;
constexpr Header_DeviceType Header::ROUTER_TP_LINK;
constexpr Header_DeviceType Header::CAMERA;
constexpr Header_DeviceType Header::PYTHON_CLIENT;
constexpr Header_DeviceType Header::DeviceType_MIN;
constexpr Header_DeviceType Header::DeviceType_MAX;
constexpr int Header::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_DeviceId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5finterface_5fidl_2eproto);
  return file_level_enum_descriptors_message_5finterface_5fidl_2eproto[1];
}
bool Header_DeviceId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Header_DeviceId Header::SERVER_UDP_X86_TALCA_ID;
constexpr Header_DeviceId Header::WEB_API_PYTHON_CLIENT_ID;
constexpr Header_DeviceId Header::GENERIC_TP_LINK_ROUTER_ID;
constexpr Header_DeviceId Header::DeviceId_MIN;
constexpr Header_DeviceId Header::DeviceId_MAX;
constexpr int Header::DeviceId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5finterface_5fidl_2eproto);
  return file_level_enum_descriptors_message_5finterface_5fidl_2eproto[2];
}
bool Header_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Header_MessageType Header::EVENT;
constexpr Header_MessageType Header::COMMAND;
constexpr Header_MessageType Header::DATA;
constexpr Header_MessageType Header::VIDEO;
constexpr Header_MessageType Header::EVENT_PROTO;
constexpr Header_MessageType Header::COMMAND_PROTO;
constexpr Header_MessageType Header::DATA_PROTO;
constexpr Header_MessageType Header::COUNT;
constexpr Header_MessageType Header::MessageType_MIN;
constexpr Header_MessageType Header::MessageType_MAX;
constexpr int Header::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandWithArguments_Arguments_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_5finterface_5fidl_2eproto);
  return file_level_enum_descriptors_message_5finterface_5fidl_2eproto[3];
}
bool CommandWithArguments_Arguments_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandWithArguments_Arguments CommandWithArguments::ONE;
constexpr CommandWithArguments_Arguments CommandWithArguments::TWO;
constexpr CommandWithArguments_Arguments CommandWithArguments::THREE;
constexpr CommandWithArguments_Arguments CommandWithArguments::FOUR;
constexpr CommandWithArguments_Arguments CommandWithArguments::TOTAL;
constexpr CommandWithArguments_Arguments CommandWithArguments::Arguments_MIN;
constexpr CommandWithArguments_Arguments CommandWithArguments::Arguments_MAX;
constexpr int CommandWithArguments::Arguments_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Header::InitAsDefaultInstance() {
}
class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_target_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_agent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_week_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_request_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_source_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_target_device_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_has_administrative_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

Header::Header()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_interface.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_agent_id_, &from.target_agent_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&target_agent_id_)) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:agent_interface.Header)
}

void Header::SharedCtor() {
  ::memset(&target_agent_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&target_agent_id_)) + sizeof(message_type_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:agent_interface.Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Header& Header::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Header_message_5finterface_5fidl_2eproto.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_interface.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&target_agent_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_ack_) -
        reinterpret_cast<char*>(&target_agent_id_)) + sizeof(request_ack_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&has_administrative_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_type_) -
        reinterpret_cast<char*>(&has_administrative_id_)) + sizeof(message_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed32 target_agent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_target_agent_id(&has_bits);
          target_agent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 source_agent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_source_agent_id(&has_bits);
          source_agent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 week_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_week_number(&has_bits);
          week_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required float timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool request_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_request_ack(&has_bits);
          request_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .agent_interface.Header.DeviceType source_device_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::agent_interface::Header_DeviceType_IsValid(val))) {
            _internal_set_source_device_type(static_cast<::agent_interface::Header_DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .agent_interface.Header.DeviceType target_device_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::agent_interface::Header_DeviceType_IsValid(val))) {
            _internal_set_target_device_type(static_cast<::agent_interface::Header_DeviceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required fixed32 message_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required bool has_administrative_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_has_administrative_id(&has_bits);
          has_administrative_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .agent_interface.Header.MessageType message_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::agent_interface::Header_MessageType_IsValid(val))) {
            _internal_set_message_type(static_cast<::agent_interface::Header_MessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_interface.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed32 target_agent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_target_agent_id(), target);
  }

  // required fixed32 source_agent_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_source_agent_id(), target);
  }

  // required fixed32 week_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_week_number(), target);
  }

  // required fixed32 year = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_year(), target);
  }

  // required float timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_timestamp(), target);
  }

  // required bool request_ack = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_request_ack(), target);
  }

  // required .agent_interface.Header.DeviceType source_device_type = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_source_device_type(), target);
  }

  // required .agent_interface.Header.DeviceType target_device_type = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_target_device_type(), target);
  }

  // required fixed32 message_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_message_id(), target);
  }

  // required bool has_administrative_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_has_administrative_id(), target);
  }

  // required .agent_interface.Header.MessageType message_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_interface.Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:agent_interface.Header)
  size_t total_size = 0;

  if (_internal_has_target_agent_id()) {
    // required fixed32 target_agent_id = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_source_agent_id()) {
    // required fixed32 source_agent_id = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_week_number()) {
    // required fixed32 week_number = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_year()) {
    // required fixed32 year = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_timestamp()) {
    // required float timestamp = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_source_device_type()) {
    // required .agent_interface.Header.DeviceType source_device_type = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_device_type());
  }

  if (_internal_has_target_device_type()) {
    // required .agent_interface.Header.DeviceType target_device_type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target_device_type());
  }

  if (_internal_has_request_ack()) {
    // required bool request_ack = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_has_administrative_id()) {
    // required bool has_administrative_id = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_message_id()) {
    // required fixed32 message_id = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_message_type()) {
    // required .agent_interface.Header.MessageType message_type = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_interface.Header)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required fixed32 target_agent_id = 1;
    total_size += 1 + 4;

    // required fixed32 source_agent_id = 2;
    total_size += 1 + 4;

    // required fixed32 week_number = 3;
    total_size += 1 + 4;

    // required fixed32 year = 4;
    total_size += 1 + 4;

    // required float timestamp = 5;
    total_size += 1 + 4;

    // required .agent_interface.Header.DeviceType source_device_type = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_device_type());

    // required .agent_interface.Header.DeviceType target_device_type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target_device_type());

    // required bool request_ack = 6;
    total_size += 1 + 1;

    // required bool has_administrative_id = 10;
    total_size += 1 + 1;

    // required fixed32 message_id = 9;
    total_size += 1 + 4;

    // required .agent_interface.Header.MessageType message_type = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_interface.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_interface.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_interface.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_interface.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      target_agent_id_ = from.target_agent_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_agent_id_ = from.source_agent_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      week_number_ = from.week_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_device_type_ = from.source_device_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      target_device_type_ = from.target_device_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      request_ack_ = from.request_ack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      has_administrative_id_ = from.has_administrative_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      message_type_ = from.message_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_interface.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_interface.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_agent_id_, other->target_agent_id_);
  swap(source_agent_id_, other->source_agent_id_);
  swap(week_number_, other->week_number_);
  swap(year_, other->year_);
  swap(timestamp_, other->timestamp_);
  swap(source_device_type_, other->source_device_type_);
  swap(target_device_type_, other->target_device_type_);
  swap(request_ack_, other->request_ack_);
  swap(has_administrative_id_, other->has_administrative_id_);
  swap(message_id_, other->message_id_);
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::agent_interface::_Event_default_instance_._instance.get_mutable()->header_ = const_cast< ::agent_interface::Header*>(
      ::agent_interface::Header::internal_default_instance());
}
class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static const ::agent_interface::Header& header(const Event* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::agent_interface::Header&
Event::_Internal::header(const Event* msg) {
  return *msg->header_;
}
Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_interface.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_header()) {
    header_ = new ::agent_interface::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:agent_interface.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_message_5finterface_5fidl_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:agent_interface.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_message_5finterface_5fidl_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_interface.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .agent_interface.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agent_interface.Event.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_interface.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .agent_interface.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required fixed32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_id(), target);
  }

  // required string description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "agent_interface.Event.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_interface.Event)
  return target;
}

size_t Event::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:agent_interface.Event)
  size_t total_size = 0;

  if (_internal_has_description()) {
    // required string description = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (_internal_has_header()) {
    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_id()) {
    // required fixed32 id = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_interface.Event)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string description = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());

    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required fixed32 id = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_interface.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_interface.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_interface.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_interface.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::agent_interface::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_interface.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_interface.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommandWithArguments::InitAsDefaultInstance() {
  ::agent_interface::_CommandWithArguments_default_instance_._instance.get_mutable()->header_ = const_cast< ::agent_interface::Header*>(
      ::agent_interface::Header::internal_default_instance());
}
class CommandWithArguments::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandWithArguments>()._has_bits_);
  static const ::agent_interface::Header& header(const CommandWithArguments* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_arg_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::agent_interface::Header&
CommandWithArguments::_Internal::header(const CommandWithArguments* msg) {
  return *msg->header_;
}
CommandWithArguments::CommandWithArguments()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_interface.CommandWithArguments)
}
CommandWithArguments::CommandWithArguments(const CommandWithArguments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      name_(from.name_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::agent_interface::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_arg_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(number_arg_count_));
  // @@protoc_insertion_point(copy_constructor:agent_interface.CommandWithArguments)
}

void CommandWithArguments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandWithArguments_message_5finterface_5fidl_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_arg_count_) -
      reinterpret_cast<char*>(&header_)) + sizeof(number_arg_count_));
}

CommandWithArguments::~CommandWithArguments() {
  // @@protoc_insertion_point(destructor:agent_interface.CommandWithArguments)
  SharedDtor();
}

void CommandWithArguments::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void CommandWithArguments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandWithArguments& CommandWithArguments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandWithArguments_message_5finterface_5fidl_2eproto.base);
  return *internal_default_instance();
}


void CommandWithArguments::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_interface.CommandWithArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_arg_count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(number_arg_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CommandWithArguments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .agent_interface.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::agent_interface::CommandWithArguments_Arguments_IsValid(val))) {
            _internal_set_number_arg_count(static_cast<::agent_interface::CommandWithArguments_Arguments>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agent_interface.CommandWithArguments.name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agent_interface.CommandWithArguments.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandWithArguments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_interface.CommandWithArguments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .agent_interface.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required fixed32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_id(), target);
  }

  // required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_number_arg_count(), target);
  }

  // repeated string name = 4;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "agent_interface.CommandWithArguments.name");
    target = stream->WriteString(4, s, target);
  }

  // repeated string value = 5;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "agent_interface.CommandWithArguments.value");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_interface.CommandWithArguments)
  return target;
}

size_t CommandWithArguments::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:agent_interface.CommandWithArguments)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_id()) {
    // required fixed32 id = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_number_arg_count()) {
    // required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_number_arg_count());
  }

  return total_size;
}
size_t CommandWithArguments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_interface.CommandWithArguments)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required fixed32 id = 2;
    total_size += 1 + 4;

    // required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_number_arg_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  // repeated string value = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandWithArguments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_interface.CommandWithArguments)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandWithArguments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandWithArguments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_interface.CommandWithArguments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_interface.CommandWithArguments)
    MergeFrom(*source);
  }
}

void CommandWithArguments::MergeFrom(const CommandWithArguments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_interface.CommandWithArguments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::agent_interface::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_arg_count_ = from.number_arg_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandWithArguments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_interface.CommandWithArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandWithArguments::CopyFrom(const CommandWithArguments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_interface.CommandWithArguments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandWithArguments::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void CommandWithArguments::InternalSwap(CommandWithArguments* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.InternalSwap(&other->name_);
  value_.InternalSwap(&other->value_);
  swap(header_, other->header_);
  swap(id_, other->id_);
  swap(number_arg_count_, other->number_arg_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandWithArguments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Telemetry::InitAsDefaultInstance() {
  ::agent_interface::_Telemetry_default_instance_._instance.get_mutable()->header_ = const_cast< ::agent_interface::Header*>(
      ::agent_interface::Header::internal_default_instance());
}
class Telemetry::_Internal {
 public:
  using HasBits = decltype(std::declval<Telemetry>()._has_bits_);
  static const ::agent_interface::Header& header(const Telemetry* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::agent_interface::Header&
Telemetry::_Internal::header(const Telemetry* msg) {
  return *msg->header_;
}
Telemetry::Telemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:agent_interface.Telemetry)
}
Telemetry::Telemetry(const Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      name_(from.name_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::agent_interface::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:agent_interface.Telemetry)
}

void Telemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Telemetry_message_5finterface_5fidl_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
}

Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:agent_interface.Telemetry)
  SharedDtor();
}

void Telemetry::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Telemetry& Telemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Telemetry_message_5finterface_5fidl_2eproto.base);
  return *internal_default_instance();
}


void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:agent_interface.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .agent_interface.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agent_interface.Telemetry.name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agent_interface.Telemetry.value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Telemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agent_interface.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .agent_interface.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // required fixed32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_id(), target);
  }

  // repeated string name = 3;
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "agent_interface.Telemetry.name");
    target = stream->WriteString(3, s, target);
  }

  // repeated string value = 4;
  for (int i = 0, n = this->_internal_value_size(); i < n; i++) {
    const auto& s = this->_internal_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "agent_interface.Telemetry.value");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agent_interface.Telemetry)
  return target;
}

size_t Telemetry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:agent_interface.Telemetry)
  size_t total_size = 0;

  if (_internal_has_header()) {
    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (_internal_has_id()) {
    // required fixed32 id = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agent_interface.Telemetry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .agent_interface.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);

    // required fixed32 id = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  // repeated string value = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_.size());
  for (int i = 0, n = value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Telemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agent_interface.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const Telemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agent_interface.Telemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agent_interface.Telemetry)
    MergeFrom(*source);
  }
}

void Telemetry::MergeFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agent_interface.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  value_.MergeFrom(from.value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::agent_interface::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Telemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agent_interface.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agent_interface.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  return true;
}

void Telemetry::InternalSwap(Telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.InternalSwap(&other->name_);
  value_.InternalSwap(&other->value_);
  swap(header_, other->header_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Telemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace agent_interface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agent_interface::Header* Arena::CreateMaybeMessage< ::agent_interface::Header >(Arena* arena) {
  return Arena::CreateInternal< ::agent_interface::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::agent_interface::Event* Arena::CreateMaybeMessage< ::agent_interface::Event >(Arena* arena) {
  return Arena::CreateInternal< ::agent_interface::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::agent_interface::CommandWithArguments* Arena::CreateMaybeMessage< ::agent_interface::CommandWithArguments >(Arena* arena) {
  return Arena::CreateInternal< ::agent_interface::CommandWithArguments >(arena);
}
template<> PROTOBUF_NOINLINE ::agent_interface::Telemetry* Arena::CreateMaybeMessage< ::agent_interface::Telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::agent_interface::Telemetry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
