// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_interface_idl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5finterface_5fidl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5finterface_5fidl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5finterface_5fidl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5finterface_5fidl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5finterface_5fidl_2eproto;
namespace agent_interface {
class CommandWithArguments;
class CommandWithArgumentsDefaultTypeInternal;
extern CommandWithArgumentsDefaultTypeInternal _CommandWithArguments_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Telemetry;
class TelemetryDefaultTypeInternal;
extern TelemetryDefaultTypeInternal _Telemetry_default_instance_;
}  // namespace agent_interface
PROTOBUF_NAMESPACE_OPEN
template<> ::agent_interface::CommandWithArguments* Arena::CreateMaybeMessage<::agent_interface::CommandWithArguments>(Arena*);
template<> ::agent_interface::Commands* Arena::CreateMaybeMessage<::agent_interface::Commands>(Arena*);
template<> ::agent_interface::Event* Arena::CreateMaybeMessage<::agent_interface::Event>(Arena*);
template<> ::agent_interface::Header* Arena::CreateMaybeMessage<::agent_interface::Header>(Arena*);
template<> ::agent_interface::Telemetry* Arena::CreateMaybeMessage<::agent_interface::Telemetry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agent_interface {

enum Header_DeviceType : int {
  Header_DeviceType_UDP_SERVER = 0,
  Header_DeviceType_TCP_SERVER = 1,
  Header_DeviceType_SERVER_UDP_X86 = 2,
  Header_DeviceType_ROUTER_TP_LINK = 3,
  Header_DeviceType_CAMERA = 4,
  Header_DeviceType_PYTHON_CLIENT = 5
};
bool Header_DeviceType_IsValid(int value);
constexpr Header_DeviceType Header_DeviceType_DeviceType_MIN = Header_DeviceType_UDP_SERVER;
constexpr Header_DeviceType Header_DeviceType_DeviceType_MAX = Header_DeviceType_PYTHON_CLIENT;
constexpr int Header_DeviceType_DeviceType_ARRAYSIZE = Header_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_DeviceType_descriptor();
template<typename T>
inline const std::string& Header_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_DeviceType_descriptor(), enum_t_value);
}
inline bool Header_DeviceType_Parse(
    const std::string& name, Header_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_DeviceType>(
    Header_DeviceType_descriptor(), name, value);
}
enum Header_DeviceId : int {
  Header_DeviceId_SERVER_UDP_X86_TALCA_ID = 0,
  Header_DeviceId_WEB_API_PYTHON_CLIENT_ID = 1,
  Header_DeviceId_GENERIC_TP_LINK_ROUTER_ID = 2,
  Header_DeviceId_MAIN_WEB_SITE = 3
};
bool Header_DeviceId_IsValid(int value);
constexpr Header_DeviceId Header_DeviceId_DeviceId_MIN = Header_DeviceId_SERVER_UDP_X86_TALCA_ID;
constexpr Header_DeviceId Header_DeviceId_DeviceId_MAX = Header_DeviceId_MAIN_WEB_SITE;
constexpr int Header_DeviceId_DeviceId_ARRAYSIZE = Header_DeviceId_DeviceId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_DeviceId_descriptor();
template<typename T>
inline const std::string& Header_DeviceId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_DeviceId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_DeviceId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_DeviceId_descriptor(), enum_t_value);
}
inline bool Header_DeviceId_Parse(
    const std::string& name, Header_DeviceId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_DeviceId>(
    Header_DeviceId_descriptor(), name, value);
}
enum Header_MessageType : int {
  Header_MessageType_EVENT = 0,
  Header_MessageType_COMMAND = 1,
  Header_MessageType_COMMAND_PROTO = 2,
  Header_MessageType_DATA = 3,
  Header_MessageType_VIDEO = 4,
  Header_MessageType_EVENT_PROTO = 5,
  Header_MessageType_DATA_PROTO = 6,
  Header_MessageType_COUNT = 7
};
bool Header_MessageType_IsValid(int value);
constexpr Header_MessageType Header_MessageType_MessageType_MIN = Header_MessageType_EVENT;
constexpr Header_MessageType Header_MessageType_MessageType_MAX = Header_MessageType_COUNT;
constexpr int Header_MessageType_MessageType_ARRAYSIZE = Header_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Header_MessageType_descriptor();
template<typename T>
inline const std::string& Header_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Header_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Header_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Header_MessageType_descriptor(), enum_t_value);
}
inline bool Header_MessageType_Parse(
    const std::string& name, Header_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Header_MessageType>(
    Header_MessageType_descriptor(), name, value);
}
enum Commands_Id : int {
  Commands_Id_ACTIVATE_DEVICE = 1,
  Commands_Id_RESTART_DEVICE = 2,
  Commands_Id_STOP_MIDDLEWARE = 3,
  Commands_Id_SHUTDOWN_TESTING_SERVER = 4
};
bool Commands_Id_IsValid(int value);
constexpr Commands_Id Commands_Id_Id_MIN = Commands_Id_ACTIVATE_DEVICE;
constexpr Commands_Id Commands_Id_Id_MAX = Commands_Id_SHUTDOWN_TESTING_SERVER;
constexpr int Commands_Id_Id_ARRAYSIZE = Commands_Id_Id_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Commands_Id_descriptor();
template<typename T>
inline const std::string& Commands_Id_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Commands_Id>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Commands_Id_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Commands_Id_descriptor(), enum_t_value);
}
inline bool Commands_Id_Parse(
    const std::string& name, Commands_Id* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Commands_Id>(
    Commands_Id_descriptor(), name, value);
}
enum CommandWithArguments_State : int {
  CommandWithArguments_State_SENT = 0,
  CommandWithArguments_State_EXECUTED = 1,
  CommandWithArguments_State_IN_EXECUTION = 2,
  CommandWithArguments_State_SCHEDDULE_FOR_EXECUTION = 3,
  CommandWithArguments_State_NOT_EXECUTED = 4,
  CommandWithArguments_State_STOPPED = 5,
  CommandWithArguments_State_FINISHED = 6
};
bool CommandWithArguments_State_IsValid(int value);
constexpr CommandWithArguments_State CommandWithArguments_State_State_MIN = CommandWithArguments_State_SENT;
constexpr CommandWithArguments_State CommandWithArguments_State_State_MAX = CommandWithArguments_State_FINISHED;
constexpr int CommandWithArguments_State_State_ARRAYSIZE = CommandWithArguments_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandWithArguments_State_descriptor();
template<typename T>
inline const std::string& CommandWithArguments_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandWithArguments_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandWithArguments_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandWithArguments_State_descriptor(), enum_t_value);
}
inline bool CommandWithArguments_State_Parse(
    const std::string& name, CommandWithArguments_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandWithArguments_State>(
    CommandWithArguments_State_descriptor(), name, value);
}
enum CommandWithArguments_Arguments : int {
  CommandWithArguments_Arguments_ONE = 0,
  CommandWithArguments_Arguments_TWO = 1,
  CommandWithArguments_Arguments_THREE = 2,
  CommandWithArguments_Arguments_FOUR = 3,
  CommandWithArguments_Arguments_TOTAL = 4
};
bool CommandWithArguments_Arguments_IsValid(int value);
constexpr CommandWithArguments_Arguments CommandWithArguments_Arguments_Arguments_MIN = CommandWithArguments_Arguments_ONE;
constexpr CommandWithArguments_Arguments CommandWithArguments_Arguments_Arguments_MAX = CommandWithArguments_Arguments_TOTAL;
constexpr int CommandWithArguments_Arguments_Arguments_ARRAYSIZE = CommandWithArguments_Arguments_Arguments_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandWithArguments_Arguments_descriptor();
template<typename T>
inline const std::string& CommandWithArguments_Arguments_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandWithArguments_Arguments>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandWithArguments_Arguments_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandWithArguments_Arguments_descriptor(), enum_t_value);
}
inline bool CommandWithArguments_Arguments_Parse(
    const std::string& name, CommandWithArguments_Arguments* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandWithArguments_Arguments>(
    CommandWithArguments_Arguments_descriptor(), name, value);
}
// ===================================================================

class Header :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent_interface.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent_interface.Header";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5finterface_5fidl_2eproto);
    return ::descriptor_table_message_5finterface_5fidl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Header_DeviceType DeviceType;
  static constexpr DeviceType UDP_SERVER =
    Header_DeviceType_UDP_SERVER;
  static constexpr DeviceType TCP_SERVER =
    Header_DeviceType_TCP_SERVER;
  static constexpr DeviceType SERVER_UDP_X86 =
    Header_DeviceType_SERVER_UDP_X86;
  static constexpr DeviceType ROUTER_TP_LINK =
    Header_DeviceType_ROUTER_TP_LINK;
  static constexpr DeviceType CAMERA =
    Header_DeviceType_CAMERA;
  static constexpr DeviceType PYTHON_CLIENT =
    Header_DeviceType_PYTHON_CLIENT;
  static inline bool DeviceType_IsValid(int value) {
    return Header_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    Header_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    Header_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    Header_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return Header_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return Header_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(const std::string& name,
      DeviceType* value) {
    return Header_DeviceType_Parse(name, value);
  }

  typedef Header_DeviceId DeviceId;
  static constexpr DeviceId SERVER_UDP_X86_TALCA_ID =
    Header_DeviceId_SERVER_UDP_X86_TALCA_ID;
  static constexpr DeviceId WEB_API_PYTHON_CLIENT_ID =
    Header_DeviceId_WEB_API_PYTHON_CLIENT_ID;
  static constexpr DeviceId GENERIC_TP_LINK_ROUTER_ID =
    Header_DeviceId_GENERIC_TP_LINK_ROUTER_ID;
  static constexpr DeviceId MAIN_WEB_SITE =
    Header_DeviceId_MAIN_WEB_SITE;
  static inline bool DeviceId_IsValid(int value) {
    return Header_DeviceId_IsValid(value);
  }
  static constexpr DeviceId DeviceId_MIN =
    Header_DeviceId_DeviceId_MIN;
  static constexpr DeviceId DeviceId_MAX =
    Header_DeviceId_DeviceId_MAX;
  static constexpr int DeviceId_ARRAYSIZE =
    Header_DeviceId_DeviceId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceId_descriptor() {
    return Header_DeviceId_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceId_Name.");
    return Header_DeviceId_Name(enum_t_value);
  }
  static inline bool DeviceId_Parse(const std::string& name,
      DeviceId* value) {
    return Header_DeviceId_Parse(name, value);
  }

  typedef Header_MessageType MessageType;
  static constexpr MessageType EVENT =
    Header_MessageType_EVENT;
  static constexpr MessageType COMMAND =
    Header_MessageType_COMMAND;
  static constexpr MessageType COMMAND_PROTO =
    Header_MessageType_COMMAND_PROTO;
  static constexpr MessageType DATA =
    Header_MessageType_DATA;
  static constexpr MessageType VIDEO =
    Header_MessageType_VIDEO;
  static constexpr MessageType EVENT_PROTO =
    Header_MessageType_EVENT_PROTO;
  static constexpr MessageType DATA_PROTO =
    Header_MessageType_DATA_PROTO;
  static constexpr MessageType COUNT =
    Header_MessageType_COUNT;
  static inline bool MessageType_IsValid(int value) {
    return Header_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Header_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Header_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Header_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Header_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Header_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Header_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAgentIdFieldNumber = 1,
    kSourceAgentIdFieldNumber = 2,
    kWeekNumberFieldNumber = 3,
    kYearFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kSourceDeviceTypeFieldNumber = 7,
    kTargetDeviceTypeFieldNumber = 8,
    kRequestAckFieldNumber = 6,
    kHasAdministrativeIdFieldNumber = 10,
    kMessageIdFieldNumber = 9,
    kMessageTypeFieldNumber = 11,
  };
  // required fixed32 target_agent_id = 1;
  bool has_target_agent_id() const;
  private:
  bool _internal_has_target_agent_id() const;
  public:
  void clear_target_agent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_agent_id() const;
  void set_target_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_agent_id() const;
  void _internal_set_target_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed32 source_agent_id = 2;
  bool has_source_agent_id() const;
  private:
  bool _internal_has_source_agent_id() const;
  public:
  void clear_source_agent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 source_agent_id() const;
  void set_source_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_source_agent_id() const;
  void _internal_set_source_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed32 week_number = 3;
  bool has_week_number() const;
  private:
  bool _internal_has_week_number() const;
  public:
  void clear_week_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 week_number() const;
  void set_week_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_week_number() const;
  void _internal_set_week_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required fixed32 year = 4;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // required .agent_interface.Header.DeviceType source_device_type = 7;
  bool has_source_device_type() const;
  private:
  bool _internal_has_source_device_type() const;
  public:
  void clear_source_device_type();
  ::agent_interface::Header_DeviceType source_device_type() const;
  void set_source_device_type(::agent_interface::Header_DeviceType value);
  private:
  ::agent_interface::Header_DeviceType _internal_source_device_type() const;
  void _internal_set_source_device_type(::agent_interface::Header_DeviceType value);
  public:

  // required .agent_interface.Header.DeviceType target_device_type = 8;
  bool has_target_device_type() const;
  private:
  bool _internal_has_target_device_type() const;
  public:
  void clear_target_device_type();
  ::agent_interface::Header_DeviceType target_device_type() const;
  void set_target_device_type(::agent_interface::Header_DeviceType value);
  private:
  ::agent_interface::Header_DeviceType _internal_target_device_type() const;
  void _internal_set_target_device_type(::agent_interface::Header_DeviceType value);
  public:

  // required bool request_ack = 6;
  bool has_request_ack() const;
  private:
  bool _internal_has_request_ack() const;
  public:
  void clear_request_ack();
  bool request_ack() const;
  void set_request_ack(bool value);
  private:
  bool _internal_request_ack() const;
  void _internal_set_request_ack(bool value);
  public:

  // required bool has_administrative_id = 10;
  bool has_has_administrative_id() const;
  private:
  bool _internal_has_has_administrative_id() const;
  public:
  void clear_has_administrative_id();
  bool has_administrative_id() const;
  void set_has_administrative_id(bool value);
  private:
  bool _internal_has_administrative_id() const;
  void _internal_set_has_administrative_id(bool value);
  public:

  // required fixed32 message_id = 9;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .agent_interface.Header.MessageType message_type = 11;
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  ::agent_interface::Header_MessageType message_type() const;
  void set_message_type(::agent_interface::Header_MessageType value);
  private:
  ::agent_interface::Header_MessageType _internal_message_type() const;
  void _internal_set_message_type(::agent_interface::Header_MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:agent_interface.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 source_agent_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 week_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  float timestamp_;
  int source_device_type_;
  int target_device_type_;
  bool request_ack_;
  bool has_administrative_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id_;
  int message_type_;
  friend struct ::TableStruct_message_5finterface_5fidl_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent_interface.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent_interface.Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5finterface_5fidl_2eproto);
    return ::descriptor_table_message_5finterface_5fidl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required .agent_interface.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::agent_interface::Header& header() const;
  ::agent_interface::Header* release_header();
  ::agent_interface::Header* mutable_header();
  void set_allocated_header(::agent_interface::Header* header);
  private:
  const ::agent_interface::Header& _internal_header() const;
  ::agent_interface::Header* _internal_mutable_header();
  public:

  // required fixed32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agent_interface.Event)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::agent_interface::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_message_5finterface_5fidl_2eproto;
};
// -------------------------------------------------------------------

class Commands :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent_interface.Commands) */ {
 public:
  Commands();
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent_interface.Commands";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5finterface_5fidl_2eproto);
    return ::descriptor_table_message_5finterface_5fidl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Commands_Id Id;
  static constexpr Id ACTIVATE_DEVICE =
    Commands_Id_ACTIVATE_DEVICE;
  static constexpr Id RESTART_DEVICE =
    Commands_Id_RESTART_DEVICE;
  static constexpr Id STOP_MIDDLEWARE =
    Commands_Id_STOP_MIDDLEWARE;
  static constexpr Id SHUTDOWN_TESTING_SERVER =
    Commands_Id_SHUTDOWN_TESTING_SERVER;
  static inline bool Id_IsValid(int value) {
    return Commands_Id_IsValid(value);
  }
  static constexpr Id Id_MIN =
    Commands_Id_Id_MIN;
  static constexpr Id Id_MAX =
    Commands_Id_Id_MAX;
  static constexpr int Id_ARRAYSIZE =
    Commands_Id_Id_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Id_descriptor() {
    return Commands_Id_descriptor();
  }
  template<typename T>
  static inline const std::string& Id_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Id>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Id_Name.");
    return Commands_Id_Name(enum_t_value);
  }
  static inline bool Id_Parse(const std::string& name,
      Id* value) {
    return Commands_Id_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:agent_interface.Commands)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5finterface_5fidl_2eproto;
};
// -------------------------------------------------------------------

class CommandWithArguments :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent_interface.CommandWithArguments) */ {
 public:
  CommandWithArguments();
  virtual ~CommandWithArguments();

  CommandWithArguments(const CommandWithArguments& from);
  CommandWithArguments(CommandWithArguments&& from) noexcept
    : CommandWithArguments() {
    *this = ::std::move(from);
  }

  inline CommandWithArguments& operator=(const CommandWithArguments& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandWithArguments& operator=(CommandWithArguments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandWithArguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandWithArguments* internal_default_instance() {
    return reinterpret_cast<const CommandWithArguments*>(
               &_CommandWithArguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandWithArguments& a, CommandWithArguments& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandWithArguments* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandWithArguments* New() const final {
    return CreateMaybeMessage<CommandWithArguments>(nullptr);
  }

  CommandWithArguments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandWithArguments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandWithArguments& from);
  void MergeFrom(const CommandWithArguments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandWithArguments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent_interface.CommandWithArguments";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5finterface_5fidl_2eproto);
    return ::descriptor_table_message_5finterface_5fidl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CommandWithArguments_State State;
  static constexpr State SENT =
    CommandWithArguments_State_SENT;
  static constexpr State EXECUTED =
    CommandWithArguments_State_EXECUTED;
  static constexpr State IN_EXECUTION =
    CommandWithArguments_State_IN_EXECUTION;
  static constexpr State SCHEDDULE_FOR_EXECUTION =
    CommandWithArguments_State_SCHEDDULE_FOR_EXECUTION;
  static constexpr State NOT_EXECUTED =
    CommandWithArguments_State_NOT_EXECUTED;
  static constexpr State STOPPED =
    CommandWithArguments_State_STOPPED;
  static constexpr State FINISHED =
    CommandWithArguments_State_FINISHED;
  static inline bool State_IsValid(int value) {
    return CommandWithArguments_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CommandWithArguments_State_State_MIN;
  static constexpr State State_MAX =
    CommandWithArguments_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CommandWithArguments_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CommandWithArguments_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CommandWithArguments_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return CommandWithArguments_State_Parse(name, value);
  }

  typedef CommandWithArguments_Arguments Arguments;
  static constexpr Arguments ONE =
    CommandWithArguments_Arguments_ONE;
  static constexpr Arguments TWO =
    CommandWithArguments_Arguments_TWO;
  static constexpr Arguments THREE =
    CommandWithArguments_Arguments_THREE;
  static constexpr Arguments FOUR =
    CommandWithArguments_Arguments_FOUR;
  static constexpr Arguments TOTAL =
    CommandWithArguments_Arguments_TOTAL;
  static inline bool Arguments_IsValid(int value) {
    return CommandWithArguments_Arguments_IsValid(value);
  }
  static constexpr Arguments Arguments_MIN =
    CommandWithArguments_Arguments_Arguments_MIN;
  static constexpr Arguments Arguments_MAX =
    CommandWithArguments_Arguments_Arguments_MAX;
  static constexpr int Arguments_ARRAYSIZE =
    CommandWithArguments_Arguments_Arguments_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Arguments_descriptor() {
    return CommandWithArguments_Arguments_descriptor();
  }
  template<typename T>
  static inline const std::string& Arguments_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Arguments>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Arguments_Name.");
    return CommandWithArguments_Arguments_Name(enum_t_value);
  }
  static inline bool Arguments_Parse(const std::string& name,
      Arguments* value) {
    return CommandWithArguments_Arguments_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kValueFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumberArgCountFieldNumber = 3,
    kStateFieldNumber = 6,
  };
  // repeated string name = 4;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated string value = 5;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // required .agent_interface.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::agent_interface::Header& header() const;
  ::agent_interface::Header* release_header();
  ::agent_interface::Header* mutable_header();
  void set_allocated_header(::agent_interface::Header* header);
  private:
  const ::agent_interface::Header& _internal_header() const;
  ::agent_interface::Header* _internal_mutable_header();
  public:

  // required fixed32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
  bool has_number_arg_count() const;
  private:
  bool _internal_has_number_arg_count() const;
  public:
  void clear_number_arg_count();
  ::agent_interface::CommandWithArguments_Arguments number_arg_count() const;
  void set_number_arg_count(::agent_interface::CommandWithArguments_Arguments value);
  private:
  ::agent_interface::CommandWithArguments_Arguments _internal_number_arg_count() const;
  void _internal_set_number_arg_count(::agent_interface::CommandWithArguments_Arguments value);
  public:

  // required .agent_interface.CommandWithArguments.State state = 6;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::agent_interface::CommandWithArguments_State state() const;
  void set_state(::agent_interface::CommandWithArguments_State value);
  private:
  ::agent_interface::CommandWithArguments_State _internal_state() const;
  void _internal_set_state(::agent_interface::CommandWithArguments_State value);
  public:

  // @@protoc_insertion_point(class_scope:agent_interface.CommandWithArguments)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::agent_interface::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int number_arg_count_;
  int state_;
  friend struct ::TableStruct_message_5finterface_5fidl_2eproto;
};
// -------------------------------------------------------------------

class Telemetry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agent_interface.Telemetry) */ {
 public:
  Telemetry();
  virtual ~Telemetry();

  Telemetry(const Telemetry& from);
  Telemetry(Telemetry&& from) noexcept
    : Telemetry() {
    *this = ::std::move(from);
  }

  inline Telemetry& operator=(const Telemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Telemetry& operator=(Telemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Telemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Telemetry* internal_default_instance() {
    return reinterpret_cast<const Telemetry*>(
               &_Telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Telemetry& a, Telemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(Telemetry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Telemetry* New() const final {
    return CreateMaybeMessage<Telemetry>(nullptr);
  }

  Telemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Telemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Telemetry& from);
  void MergeFrom(const Telemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Telemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agent_interface.Telemetry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5finterface_5fidl_2eproto);
    return ::descriptor_table_message_5finterface_5fidl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kValueFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated string name = 3;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated string value = 4;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, size_t size);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value();
  private:
  const std::string& _internal_value(int index) const;
  std::string* _internal_add_value();
  public:

  // required .agent_interface.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::agent_interface::Header& header() const;
  ::agent_interface::Header* release_header();
  ::agent_interface::Header* mutable_header();
  void set_allocated_header(::agent_interface::Header* header);
  private:
  const ::agent_interface::Header& _internal_header() const;
  ::agent_interface::Header* _internal_mutable_header();
  public:

  // required fixed32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agent_interface.Telemetry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_;
  ::agent_interface::Header* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_message_5finterface_5fidl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// required fixed32 target_agent_id = 1;
inline bool Header::_internal_has_target_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_target_agent_id() const {
  return _internal_has_target_agent_id();
}
inline void Header::clear_target_agent_id() {
  target_agent_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_target_agent_id() const {
  return target_agent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::target_agent_id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.target_agent_id)
  return _internal_target_agent_id();
}
inline void Header::_internal_set_target_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  target_agent_id_ = value;
}
inline void Header::set_target_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_agent_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.target_agent_id)
}

// required fixed32 source_agent_id = 2;
inline bool Header::_internal_has_source_agent_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_source_agent_id() const {
  return _internal_has_source_agent_id();
}
inline void Header::clear_source_agent_id() {
  source_agent_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_source_agent_id() const {
  return source_agent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::source_agent_id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.source_agent_id)
  return _internal_source_agent_id();
}
inline void Header::_internal_set_source_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  source_agent_id_ = value;
}
inline void Header::set_source_agent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_source_agent_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.source_agent_id)
}

// required fixed32 week_number = 3;
inline bool Header::_internal_has_week_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_week_number() const {
  return _internal_has_week_number();
}
inline void Header::clear_week_number() {
  week_number_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_week_number() const {
  return week_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::week_number() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.week_number)
  return _internal_week_number();
}
inline void Header::_internal_set_week_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  week_number_ = value;
}
inline void Header::set_week_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_week_number(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.week_number)
}

// required fixed32 year = 4;
inline bool Header::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Header::has_year() const {
  return _internal_has_year();
}
inline void Header::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::year() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.year)
  return _internal_year();
}
inline void Header::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  year_ = value;
}
inline void Header::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.year)
}

// required float timestamp = 5;
inline bool Header::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Header::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Header::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Header::_internal_timestamp() const {
  return timestamp_;
}
inline float Header::timestamp() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000010u;
  timestamp_ = value;
}
inline void Header::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.timestamp)
}

// required bool request_ack = 6;
inline bool Header::_internal_has_request_ack() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Header::has_request_ack() const {
  return _internal_has_request_ack();
}
inline void Header::clear_request_ack() {
  request_ack_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Header::_internal_request_ack() const {
  return request_ack_;
}
inline bool Header::request_ack() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.request_ack)
  return _internal_request_ack();
}
inline void Header::_internal_set_request_ack(bool value) {
  _has_bits_[0] |= 0x00000080u;
  request_ack_ = value;
}
inline void Header::set_request_ack(bool value) {
  _internal_set_request_ack(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.request_ack)
}

// required .agent_interface.Header.DeviceType source_device_type = 7;
inline bool Header::_internal_has_source_device_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Header::has_source_device_type() const {
  return _internal_has_source_device_type();
}
inline void Header::clear_source_device_type() {
  source_device_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::agent_interface::Header_DeviceType Header::_internal_source_device_type() const {
  return static_cast< ::agent_interface::Header_DeviceType >(source_device_type_);
}
inline ::agent_interface::Header_DeviceType Header::source_device_type() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.source_device_type)
  return _internal_source_device_type();
}
inline void Header::_internal_set_source_device_type(::agent_interface::Header_DeviceType value) {
  assert(::agent_interface::Header_DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  source_device_type_ = value;
}
inline void Header::set_source_device_type(::agent_interface::Header_DeviceType value) {
  _internal_set_source_device_type(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.source_device_type)
}

// required .agent_interface.Header.DeviceType target_device_type = 8;
inline bool Header::_internal_has_target_device_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Header::has_target_device_type() const {
  return _internal_has_target_device_type();
}
inline void Header::clear_target_device_type() {
  target_device_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::agent_interface::Header_DeviceType Header::_internal_target_device_type() const {
  return static_cast< ::agent_interface::Header_DeviceType >(target_device_type_);
}
inline ::agent_interface::Header_DeviceType Header::target_device_type() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.target_device_type)
  return _internal_target_device_type();
}
inline void Header::_internal_set_target_device_type(::agent_interface::Header_DeviceType value) {
  assert(::agent_interface::Header_DeviceType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  target_device_type_ = value;
}
inline void Header::set_target_device_type(::agent_interface::Header_DeviceType value) {
  _internal_set_target_device_type(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.target_device_type)
}

// required fixed32 message_id = 9;
inline bool Header::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Header::has_message_id() const {
  return _internal_has_message_id();
}
inline void Header::clear_message_id() {
  message_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Header::message_id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.message_id)
  return _internal_message_id();
}
inline void Header::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  message_id_ = value;
}
inline void Header::set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.message_id)
}

// required bool has_administrative_id = 10;
inline bool Header::_internal_has_has_administrative_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Header::has_has_administrative_id() const {
  return _internal_has_has_administrative_id();
}
inline void Header::clear_has_administrative_id() {
  has_administrative_id_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool Header::_internal_has_administrative_id() const {
  return has_administrative_id_;
}
inline bool Header::has_administrative_id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.has_administrative_id)
  return _internal_has_administrative_id();
}
inline void Header::_internal_set_has_administrative_id(bool value) {
  _has_bits_[0] |= 0x00000100u;
  has_administrative_id_ = value;
}
inline void Header::set_has_administrative_id(bool value) {
  _internal_set_has_administrative_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.has_administrative_id)
}

// required .agent_interface.Header.MessageType message_type = 11;
inline bool Header::_internal_has_message_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Header::has_message_type() const {
  return _internal_has_message_type();
}
inline void Header::clear_message_type() {
  message_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::agent_interface::Header_MessageType Header::_internal_message_type() const {
  return static_cast< ::agent_interface::Header_MessageType >(message_type_);
}
inline ::agent_interface::Header_MessageType Header::message_type() const {
  // @@protoc_insertion_point(field_get:agent_interface.Header.message_type)
  return _internal_message_type();
}
inline void Header::_internal_set_message_type(::agent_interface::Header_MessageType value) {
  assert(::agent_interface::Header_MessageType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  message_type_ = value;
}
inline void Header::set_message_type(::agent_interface::Header_MessageType value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:agent_interface.Header.message_type)
}

// -------------------------------------------------------------------

// Event

// required .agent_interface.Header header = 1;
inline bool Event::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Event::has_header() const {
  return _internal_has_header();
}
inline void Event::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::agent_interface::Header& Event::_internal_header() const {
  const ::agent_interface::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agent_interface::Header*>(
      &::agent_interface::_Header_default_instance_);
}
inline const ::agent_interface::Header& Event::header() const {
  // @@protoc_insertion_point(field_get:agent_interface.Event.header)
  return _internal_header();
}
inline ::agent_interface::Header* Event::release_header() {
  // @@protoc_insertion_point(field_release:agent_interface.Event.header)
  _has_bits_[0] &= ~0x00000002u;
  ::agent_interface::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::agent_interface::Header* Event::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent_interface::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::agent_interface::Header* Event::mutable_header() {
  // @@protoc_insertion_point(field_mutable:agent_interface.Event.header)
  return _internal_mutable_header();
}
inline void Event::set_allocated_header(::agent_interface::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:agent_interface.Event.header)
}

// required fixed32 id = 2;
inline bool Event::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Event::has_id() const {
  return _internal_has_id();
}
inline void Event::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Event::id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Event.id)
  return _internal_id();
}
inline void Event::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void Event::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Event.id)
}

// required string description = 3;
inline bool Event::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_description() const {
  return _internal_has_description();
}
inline void Event::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Event::description() const {
  // @@protoc_insertion_point(field_get:agent_interface.Event.description)
  return _internal_description();
}
inline void Event::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:agent_interface.Event.description)
}
inline std::string* Event::mutable_description() {
  // @@protoc_insertion_point(field_mutable:agent_interface.Event.description)
  return _internal_mutable_description();
}
inline const std::string& Event::_internal_description() const {
  return description_.GetNoArena();
}
inline void Event::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Event::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:agent_interface.Event.description)
}
inline void Event::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:agent_interface.Event.description)
}
inline void Event::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:agent_interface.Event.description)
}
inline std::string* Event::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_description() {
  // @@protoc_insertion_point(field_release:agent_interface.Event.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:agent_interface.Event.description)
}

// -------------------------------------------------------------------

// Commands

// -------------------------------------------------------------------

// CommandWithArguments

// required .agent_interface.Header header = 1;
inline bool CommandWithArguments::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool CommandWithArguments::has_header() const {
  return _internal_has_header();
}
inline void CommandWithArguments::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agent_interface::Header& CommandWithArguments::_internal_header() const {
  const ::agent_interface::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agent_interface::Header*>(
      &::agent_interface::_Header_default_instance_);
}
inline const ::agent_interface::Header& CommandWithArguments::header() const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.header)
  return _internal_header();
}
inline ::agent_interface::Header* CommandWithArguments::release_header() {
  // @@protoc_insertion_point(field_release:agent_interface.CommandWithArguments.header)
  _has_bits_[0] &= ~0x00000001u;
  ::agent_interface::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::agent_interface::Header* CommandWithArguments::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent_interface::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::agent_interface::Header* CommandWithArguments::mutable_header() {
  // @@protoc_insertion_point(field_mutable:agent_interface.CommandWithArguments.header)
  return _internal_mutable_header();
}
inline void CommandWithArguments::set_allocated_header(::agent_interface::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:agent_interface.CommandWithArguments.header)
}

// required fixed32 id = 2;
inline bool CommandWithArguments::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandWithArguments::has_id() const {
  return _internal_has_id();
}
inline void CommandWithArguments::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandWithArguments::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommandWithArguments::id() const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.id)
  return _internal_id();
}
inline void CommandWithArguments::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CommandWithArguments::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.id)
}

// required .agent_interface.CommandWithArguments.Arguments number_arg_count = 3;
inline bool CommandWithArguments::_internal_has_number_arg_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandWithArguments::has_number_arg_count() const {
  return _internal_has_number_arg_count();
}
inline void CommandWithArguments::clear_number_arg_count() {
  number_arg_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::agent_interface::CommandWithArguments_Arguments CommandWithArguments::_internal_number_arg_count() const {
  return static_cast< ::agent_interface::CommandWithArguments_Arguments >(number_arg_count_);
}
inline ::agent_interface::CommandWithArguments_Arguments CommandWithArguments::number_arg_count() const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.number_arg_count)
  return _internal_number_arg_count();
}
inline void CommandWithArguments::_internal_set_number_arg_count(::agent_interface::CommandWithArguments_Arguments value) {
  assert(::agent_interface::CommandWithArguments_Arguments_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  number_arg_count_ = value;
}
inline void CommandWithArguments::set_number_arg_count(::agent_interface::CommandWithArguments_Arguments value) {
  _internal_set_number_arg_count(value);
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.number_arg_count)
}

// repeated string name = 4;
inline int CommandWithArguments::_internal_name_size() const {
  return name_.size();
}
inline int CommandWithArguments::name_size() const {
  return _internal_name_size();
}
inline void CommandWithArguments::clear_name() {
  name_.Clear();
}
inline std::string* CommandWithArguments::add_name() {
  // @@protoc_insertion_point(field_add_mutable:agent_interface.CommandWithArguments.name)
  return _internal_add_name();
}
inline const std::string& CommandWithArguments::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& CommandWithArguments::name(int index) const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.name)
  return _internal_name(index);
}
inline std::string* CommandWithArguments::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:agent_interface.CommandWithArguments.name)
  return name_.Mutable(index);
}
inline void CommandWithArguments::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.name)
  name_.Mutable(index)->assign(value);
}
inline void CommandWithArguments::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void CommandWithArguments::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_interface.CommandWithArguments.name)
}
inline void CommandWithArguments::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_interface.CommandWithArguments.name)
}
inline std::string* CommandWithArguments::_internal_add_name() {
  return name_.Add();
}
inline void CommandWithArguments::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agent_interface.CommandWithArguments.name)
}
inline void CommandWithArguments::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agent_interface.CommandWithArguments.name)
}
inline void CommandWithArguments::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agent_interface.CommandWithArguments.name)
}
inline void CommandWithArguments::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agent_interface.CommandWithArguments.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandWithArguments::name() const {
  // @@protoc_insertion_point(field_list:agent_interface.CommandWithArguments.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandWithArguments::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:agent_interface.CommandWithArguments.name)
  return &name_;
}

// repeated string value = 5;
inline int CommandWithArguments::_internal_value_size() const {
  return value_.size();
}
inline int CommandWithArguments::value_size() const {
  return _internal_value_size();
}
inline void CommandWithArguments::clear_value() {
  value_.Clear();
}
inline std::string* CommandWithArguments::add_value() {
  // @@protoc_insertion_point(field_add_mutable:agent_interface.CommandWithArguments.value)
  return _internal_add_value();
}
inline const std::string& CommandWithArguments::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& CommandWithArguments::value(int index) const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.value)
  return _internal_value(index);
}
inline std::string* CommandWithArguments::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:agent_interface.CommandWithArguments.value)
  return value_.Mutable(index);
}
inline void CommandWithArguments::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.value)
  value_.Mutable(index)->assign(value);
}
inline void CommandWithArguments::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void CommandWithArguments::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_interface.CommandWithArguments.value)
}
inline void CommandWithArguments::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_interface.CommandWithArguments.value)
}
inline std::string* CommandWithArguments::_internal_add_value() {
  return value_.Add();
}
inline void CommandWithArguments::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agent_interface.CommandWithArguments.value)
}
inline void CommandWithArguments::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agent_interface.CommandWithArguments.value)
}
inline void CommandWithArguments::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agent_interface.CommandWithArguments.value)
}
inline void CommandWithArguments::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agent_interface.CommandWithArguments.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommandWithArguments::value() const {
  // @@protoc_insertion_point(field_list:agent_interface.CommandWithArguments.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommandWithArguments::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:agent_interface.CommandWithArguments.value)
  return &value_;
}

// required .agent_interface.CommandWithArguments.State state = 6;
inline bool CommandWithArguments::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommandWithArguments::has_state() const {
  return _internal_has_state();
}
inline void CommandWithArguments::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::agent_interface::CommandWithArguments_State CommandWithArguments::_internal_state() const {
  return static_cast< ::agent_interface::CommandWithArguments_State >(state_);
}
inline ::agent_interface::CommandWithArguments_State CommandWithArguments::state() const {
  // @@protoc_insertion_point(field_get:agent_interface.CommandWithArguments.state)
  return _internal_state();
}
inline void CommandWithArguments::_internal_set_state(::agent_interface::CommandWithArguments_State value) {
  assert(::agent_interface::CommandWithArguments_State_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
}
inline void CommandWithArguments::set_state(::agent_interface::CommandWithArguments_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:agent_interface.CommandWithArguments.state)
}

// -------------------------------------------------------------------

// Telemetry

// required .agent_interface.Header header = 1;
inline bool Telemetry::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Telemetry::has_header() const {
  return _internal_has_header();
}
inline void Telemetry::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agent_interface::Header& Telemetry::_internal_header() const {
  const ::agent_interface::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agent_interface::Header*>(
      &::agent_interface::_Header_default_instance_);
}
inline const ::agent_interface::Header& Telemetry::header() const {
  // @@protoc_insertion_point(field_get:agent_interface.Telemetry.header)
  return _internal_header();
}
inline ::agent_interface::Header* Telemetry::release_header() {
  // @@protoc_insertion_point(field_release:agent_interface.Telemetry.header)
  _has_bits_[0] &= ~0x00000001u;
  ::agent_interface::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::agent_interface::Header* Telemetry::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::agent_interface::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::agent_interface::Header* Telemetry::mutable_header() {
  // @@protoc_insertion_point(field_mutable:agent_interface.Telemetry.header)
  return _internal_mutable_header();
}
inline void Telemetry::set_allocated_header(::agent_interface::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:agent_interface.Telemetry.header)
}

// required fixed32 id = 2;
inline bool Telemetry::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Telemetry::has_id() const {
  return _internal_has_id();
}
inline void Telemetry::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Telemetry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Telemetry::id() const {
  // @@protoc_insertion_point(field_get:agent_interface.Telemetry.id)
  return _internal_id();
}
inline void Telemetry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Telemetry::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:agent_interface.Telemetry.id)
}

// repeated string name = 3;
inline int Telemetry::_internal_name_size() const {
  return name_.size();
}
inline int Telemetry::name_size() const {
  return _internal_name_size();
}
inline void Telemetry::clear_name() {
  name_.Clear();
}
inline std::string* Telemetry::add_name() {
  // @@protoc_insertion_point(field_add_mutable:agent_interface.Telemetry.name)
  return _internal_add_name();
}
inline const std::string& Telemetry::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& Telemetry::name(int index) const {
  // @@protoc_insertion_point(field_get:agent_interface.Telemetry.name)
  return _internal_name(index);
}
inline std::string* Telemetry::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:agent_interface.Telemetry.name)
  return name_.Mutable(index);
}
inline void Telemetry::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agent_interface.Telemetry.name)
  name_.Mutable(index)->assign(value);
}
inline void Telemetry::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agent_interface.Telemetry.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void Telemetry::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_interface.Telemetry.name)
}
inline void Telemetry::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_interface.Telemetry.name)
}
inline std::string* Telemetry::_internal_add_name() {
  return name_.Add();
}
inline void Telemetry::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agent_interface.Telemetry.name)
}
inline void Telemetry::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agent_interface.Telemetry.name)
}
inline void Telemetry::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agent_interface.Telemetry.name)
}
inline void Telemetry::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agent_interface.Telemetry.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Telemetry::name() const {
  // @@protoc_insertion_point(field_list:agent_interface.Telemetry.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Telemetry::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:agent_interface.Telemetry.name)
  return &name_;
}

// repeated string value = 4;
inline int Telemetry::_internal_value_size() const {
  return value_.size();
}
inline int Telemetry::value_size() const {
  return _internal_value_size();
}
inline void Telemetry::clear_value() {
  value_.Clear();
}
inline std::string* Telemetry::add_value() {
  // @@protoc_insertion_point(field_add_mutable:agent_interface.Telemetry.value)
  return _internal_add_value();
}
inline const std::string& Telemetry::_internal_value(int index) const {
  return value_.Get(index);
}
inline const std::string& Telemetry::value(int index) const {
  // @@protoc_insertion_point(field_get:agent_interface.Telemetry.value)
  return _internal_value(index);
}
inline std::string* Telemetry::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:agent_interface.Telemetry.value)
  return value_.Mutable(index);
}
inline void Telemetry::set_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agent_interface.Telemetry.value)
  value_.Mutable(index)->assign(value);
}
inline void Telemetry::set_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agent_interface.Telemetry.value)
  value_.Mutable(index)->assign(std::move(value));
}
inline void Telemetry::set_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agent_interface.Telemetry.value)
}
inline void Telemetry::set_value(int index, const char* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agent_interface.Telemetry.value)
}
inline std::string* Telemetry::_internal_add_value() {
  return value_.Add();
}
inline void Telemetry::add_value(const std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agent_interface.Telemetry.value)
}
inline void Telemetry::add_value(std::string&& value) {
  value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agent_interface.Telemetry.value)
}
inline void Telemetry::add_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agent_interface.Telemetry.value)
}
inline void Telemetry::add_value(const char* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agent_interface.Telemetry.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Telemetry::value() const {
  // @@protoc_insertion_point(field_list:agent_interface.Telemetry.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Telemetry::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:agent_interface.Telemetry.value)
  return &value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent_interface

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::agent_interface::Header_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::Header_DeviceType>() {
  return ::agent_interface::Header_DeviceType_descriptor();
}
template <> struct is_proto_enum< ::agent_interface::Header_DeviceId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::Header_DeviceId>() {
  return ::agent_interface::Header_DeviceId_descriptor();
}
template <> struct is_proto_enum< ::agent_interface::Header_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::Header_MessageType>() {
  return ::agent_interface::Header_MessageType_descriptor();
}
template <> struct is_proto_enum< ::agent_interface::Commands_Id> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::Commands_Id>() {
  return ::agent_interface::Commands_Id_descriptor();
}
template <> struct is_proto_enum< ::agent_interface::CommandWithArguments_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::CommandWithArguments_State>() {
  return ::agent_interface::CommandWithArguments_State_descriptor();
}
template <> struct is_proto_enum< ::agent_interface::CommandWithArguments_Arguments> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agent_interface::CommandWithArguments_Arguments>() {
  return ::agent_interface::CommandWithArguments_Arguments_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5finterface_5fidl_2eproto
